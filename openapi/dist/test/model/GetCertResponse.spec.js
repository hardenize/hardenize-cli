/**
 * Hardenize Org API
 * Hardenize is a platform for continuous monitoring of network and security configuration. Hardenize supports individual accounts, intended for use by a single person, and organization accounts, which are shared among potentially many individuals. Whereas individual accounts are limited, organization accounts can have access to all Hardenize features. The Organization API, documented here, provides ability to manage and retrieve information from organization accounts.  At this time, because we're still developing these APIs, they are not enabled by default for all organizations. Please contact us so that we can enable the APIs for you. After that you'll be able to generate your API credentials in the Settings section.  **This specification is a work in progress and may change without notice.** 
 *
 * OpenAPI spec version: 0.1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.2.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HardenizeOrgApi);
  }
}(this, function(expect, HardenizeOrgApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HardenizeOrgApi.GetCertResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GetCertResponse', function() {
    it('should create an instance of GetCertResponse', function() {
      // uncomment below and update the code to test GetCertResponse
      //var instance = new HardenizeOrgApi.GetCertResponse();
      //expect(instance).to.be.a(HardenizeOrgApi.GetCertResponse);
    });

    it('should have the property cert (base name: "cert")', function() {
      // uncomment below and update the code to test the property cert
      //var instance = new HardenizeOrgApi.GetCertResponse();
      //expect(instance).to.be();
    });

  });

}));
