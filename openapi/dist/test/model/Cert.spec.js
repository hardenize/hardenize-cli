/**
 * Hardenize Org API
 * Hardenize is a platform for continuous monitoring of network and security configuration. Hardenize supports individual accounts, intended for use by a single person, and organization accounts, which are shared among potentially many individuals. Whereas individual accounts are limited, organization accounts can have access to all Hardenize features. The Organization API, documented here, provides ability to manage and retrieve information from organization accounts.  At this time, because we're still developing these APIs, they are not enabled by default for all organizations. Please contact us so that we can enable the APIs for you. After that you'll be able to generate your API credentials in the Settings section.  **This specification is a work in progress and may change without notice.** 
 *
 * OpenAPI spec version: 0.1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.2.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HardenizeOrgApi);
  }
}(this, function(expect, HardenizeOrgApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HardenizeOrgApi.Cert();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Cert', function() {
    it('should create an instance of Cert', function() {
      // uncomment below and update the code to test Cert
      //var instance = new HardenizeOrgApi.Cert();
      //expect(instance).to.be.a(HardenizeOrgApi.Cert);
    });

    it('should have the property sha256 (base name: "sha256")', function() {
      // uncomment below and update the code to test the property sha256
      //var instance = new HardenizeOrgApi.Cert();
      //expect(instance).to.be();
    });

    it('should have the property subject (base name: "subject")', function() {
      // uncomment below and update the code to test the property subject
      //var instance = new HardenizeOrgApi.Cert();
      //expect(instance).to.be();
    });

    it('should have the property serial (base name: "serial")', function() {
      // uncomment below and update the code to test the property serial
      //var instance = new HardenizeOrgApi.Cert();
      //expect(instance).to.be();
    });

    it('should have the property issuer (base name: "issuer")', function() {
      // uncomment below and update the code to test the property issuer
      //var instance = new HardenizeOrgApi.Cert();
      //expect(instance).to.be();
    });

    it('should have the property notBefore (base name: "notBefore")', function() {
      // uncomment below and update the code to test the property notBefore
      //var instance = new HardenizeOrgApi.Cert();
      //expect(instance).to.be();
    });

    it('should have the property notAfter (base name: "notAfter")', function() {
      // uncomment below and update the code to test the property notAfter
      //var instance = new HardenizeOrgApi.Cert();
      //expect(instance).to.be();
    });

    it('should have the property effectiveNotAfter (base name: "effectiveNotAfter")', function() {
      // uncomment below and update the code to test the property effectiveNotAfter
      //var instance = new HardenizeOrgApi.Cert();
      //expect(instance).to.be();
    });

    it('should have the property revokedOn (base name: "revokedOn")', function() {
      // uncomment below and update the code to test the property revokedOn
      //var instance = new HardenizeOrgApi.Cert();
      //expect(instance).to.be();
    });

    it('should have the property keyAlg (base name: "keyAlg")', function() {
      // uncomment below and update the code to test the property keyAlg
      //var instance = new HardenizeOrgApi.Cert();
      //expect(instance).to.be();
    });

    it('should have the property keyLen (base name: "keyLen")', function() {
      // uncomment below and update the code to test the property keyLen
      //var instance = new HardenizeOrgApi.Cert();
      //expect(instance).to.be();
    });

    it('should have the property keyStrength (base name: "keyStrength")', function() {
      // uncomment below and update the code to test the property keyStrength
      //var instance = new HardenizeOrgApi.Cert();
      //expect(instance).to.be();
    });

    it('should have the property sigAlg (base name: "sigAlg")', function() {
      // uncomment below and update the code to test the property sigAlg
      //var instance = new HardenizeOrgApi.Cert();
      //expect(instance).to.be();
    });

    it('should have the property spkiSha256 (base name: "spkiSha256")', function() {
      // uncomment below and update the code to test the property spkiSha256
      //var instance = new HardenizeOrgApi.Cert();
      //expect(instance).to.be();
    });

    it('should have the property hosts (base name: "hosts")', function() {
      // uncomment below and update the code to test the property hosts
      //var instance = new HardenizeOrgApi.Cert();
      //expect(instance).to.be();
    });

    it('should have the property caPathLen (base name: "caPathLen")', function() {
      // uncomment below and update the code to test the property caPathLen
      //var instance = new HardenizeOrgApi.Cert();
      //expect(instance).to.be();
    });

    it('should have the property wildcard (base name: "wildcard")', function() {
      // uncomment below and update the code to test the property wildcard
      //var instance = new HardenizeOrgApi.Cert();
      //expect(instance).to.be();
    });

    it('should have the property selfSigned (base name: "selfSigned")', function() {
      // uncomment below and update the code to test the property selfSigned
      //var instance = new HardenizeOrgApi.Cert();
      //expect(instance).to.be();
    });

    it('should have the property firstSeen (base name: "firstSeen")', function() {
      // uncomment below and update the code to test the property firstSeen
      //var instance = new HardenizeOrgApi.Cert();
      //expect(instance).to.be();
    });

    it('should have the property lastSeen (base name: "lastSeen")', function() {
      // uncomment below and update the code to test the property lastSeen
      //var instance = new HardenizeOrgApi.Cert();
      //expect(instance).to.be();
    });

    it('should have the property seenInstalled (base name: "seenInstalled")', function() {
      // uncomment below and update the code to test the property seenInstalled
      //var instance = new HardenizeOrgApi.Cert();
      //expect(instance).to.be();
    });

    it('should have the property precert (base name: "precert")', function() {
      // uncomment below and update the code to test the property precert
      //var instance = new HardenizeOrgApi.Cert();
      //expect(instance).to.be();
    });

    it('should have the property managed (base name: "managed")', function() {
      // uncomment below and update the code to test the property managed
      //var instance = new HardenizeOrgApi.Cert();
      //expect(instance).to.be();
    });

    it('should have the property ownership (base name: "ownership")', function() {
      // uncomment below and update the code to test the property ownership
      //var instance = new HardenizeOrgApi.Cert();
      //expect(instance).to.be();
    });

    it('should have the property matchesOrgHost (base name: "matchesOrgHost")', function() {
      // uncomment below and update the code to test the property matchesOrgHost
      //var instance = new HardenizeOrgApi.Cert();
      //expect(instance).to.be();
    });

    it('should have the property symantecStatus (base name: "symantecStatus")', function() {
      // uncomment below and update the code to test the property symantecStatus
      //var instance = new HardenizeOrgApi.Cert();
      //expect(instance).to.be();
    });

    it('should have the property ctRequired (base name: "ctRequired")', function() {
      // uncomment below and update the code to test the property ctRequired
      //var instance = new HardenizeOrgApi.Cert();
      //expect(instance).to.be();
    });

    it('should have the property ctCompliant (base name: "ctCompliant")', function() {
      // uncomment below and update the code to test the property ctCompliant
      //var instance = new HardenizeOrgApi.Cert();
      //expect(instance).to.be();
    });

    it('should have the property ctLogs (base name: "ctLogs")', function() {
      // uncomment below and update the code to test the property ctLogs
      //var instance = new HardenizeOrgApi.Cert();
      //expect(instance).to.be();
    });

    it('should have the property pem (base name: "pem")', function() {
      // uncomment below and update the code to test the property pem
      //var instance = new HardenizeOrgApi.Cert();
      //expect(instance).to.be();
    });

  });

}));
