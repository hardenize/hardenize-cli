/**
 * Hardenize Org API
 * Hardenize is a platform for continuous monitoring of network and security configuration. Hardenize supports individual accounts, intended for use by a single person, and organization accounts, which are shared among potentially many individuals. Whereas individual accounts are limited, organization accounts can have access to all Hardenize features. The Organization API, documented here, provides ability to manage and retrieve information from organization accounts.  At this time, because we're still developing these APIs, they are not enabled by default for all organizations. Please contact us so that we can enable the APIs for you. After that you'll be able to generate your API credentials in the Settings section.  **This specification is a work in progress and may change without notice.** 
 *
 * OpenAPI spec version: 0.4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.2.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/GetCertResponse', 'model/ListCertsResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/GetCertResponse'), require('../model/ListCertsResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.HardenizeOrgApi) {
      root.HardenizeOrgApi = {};
    }
    root.HardenizeOrgApi.CertificatesApi = factory(root.HardenizeOrgApi.ApiClient, root.HardenizeOrgApi.GetCertResponse, root.HardenizeOrgApi.ListCertsResponse);
  }
}(this, function(ApiClient, GetCertResponse, ListCertsResponse) {
  'use strict';

  /**
   * Certificates service.
   * @module api/CertificatesApi
   * @version 0.4.0
   */

  /**
   * Constructs a new CertificatesApi. 
   * @alias module:api/CertificatesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createACertificate operation.
     * @callback module:api/CertificatesApi~createACertificateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new certificate
     * Use this API endpoint to upload a new certificate to your account. For example, if you&#39;ve automated certificate generation, we suggest that you also automatically submit all new certificates to Hardenize. That way, when we observe the same certificate via Certificate Transparency, we will know for sure that it belongs to you. We may be able to determine that in any case if we see that the certificate has been installed, but uploading it to us makes this more reliable. 
     * @param {String} body PEM-encoded certificate
     * @param {module:api/CertificatesApi~createACertificateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createACertificate = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createACertificate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic HTTP Authentication'];
      var contentTypes = ['application/x-pem-file'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/certs/', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCertificates operation.
     * @callback module:api/CertificatesApi~listCertificatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCertsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of certificates
     * By default, this endpoint will return a list of all your certificates. If you provide one of the optional parameters, only the certificates matching the specified filters will be listed. If you provide multiple parameters, only the certificates matching all the specified filters will be listed.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.active If set, returns only active or inactive certificates
     * @param {Boolean} opts.expired If set, returns only expired or non-expired certificates
     * @param {Number} opts.expireInDays If set, returns only certificates that have already expired or expire in the specified number of days, according to the effectiveNotAfter timestamp
     * @param {String} opts.host If set, returns only certificates that are valid for the specified host, either because they contain the exact hostname or because they are wildcards and contain the parent hostname (e.g., a search for blog.example.com will match *.example.com wildcards)
     * @param {Number} opts.limit If set, returns only up to the specified number of certificates.
     * @param {String} opts.spkiSha256 If set, returns only certificates whose public key (SPKI) matches the provided hash
     * @param {module:api/CertificatesApi~listCertificatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCertsResponse}
     */
    this.listCertificates = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'active': opts['active'],
        'expired': opts['expired'],
        'expireInDays': opts['expireInDays'],
        'host': opts['host'],
        'limit': opts['limit'],
        'spkiSha256': opts['spkiSha256'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic HTTP Authentication'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListCertsResponse;

      return this.apiClient.callApi(
        '/certs/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveACertificate operation.
     * @callback module:api/CertificatesApi~retrieveACertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCertResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the certificate with the given SHA256 hash
     * @param {String} sha256 
     * @param {module:api/CertificatesApi~retrieveACertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCertResponse}
     */
    this.retrieveACertificate = function(sha256, callback) {
      var postBody = null;

      // verify the required parameter 'sha256' is set
      if (sha256 === undefined || sha256 === null) {
        throw new Error("Missing the required parameter 'sha256' when calling retrieveACertificate");
      }


      var pathParams = {
        'sha256': sha256
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic HTTP Authentication'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetCertResponse;

      return this.apiClient.callApi(
        '/certs/{sha256}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
