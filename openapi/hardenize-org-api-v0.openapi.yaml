---
openapi: 3.0.0

info:
  title:   Hardenize Org API
  version: 0.4.0
  description: |
    Hardenize is a platform for continuous monitoring of network
    and security configuration. Hardenize supports individual accounts,
    intended for use by a single person, and organization accounts, which
    are shared among potentially many individuals. Whereas individual
    accounts are limited, organization accounts can have access to all
    Hardenize features. The Organization API, documented here, provides
    ability to manage and retrieve information from organization accounts.

    At this time, because we're still developing these APIs, they are not
    enabled by default for all organizations. Please contact us so that
    we can enable the APIs for you. After that you'll be able to generate
    your API credentials in the Settings section.

    **This specification is a work in progress and may change without notice.**

servers:
- url: https://www.hardenize.com/org/{orgLabel}/api/v0
  variables:
    orgLabel:
      description: Organization label, substitute with the one matching your organization account.
      default: demo

tags:
- name: Certificates
  description: |
    The APIs in this section allow you to retrieve information about all
    your certificates, as well as upload your new certificates to us as
    they become available.

security:
- Basic HTTP Authentication: []

paths:
  /certs/:

    get:
      operationId: List certificates
      summary: Returns a list of certificates
      description: By default, this endpoint will return a list of all your certificates. If you provide one
        of the optional parameters, only the certificates matching the specified filters will be listed. If
        you provide multiple parameters, only the certificates matching all the specified filters will be listed.
      tags:
      - Certificates

      parameters:

      - name: active
        in: query
        required: false
        schema:
          type: boolean
          example: true
        description: If set, returns only active or inactive certificates

      - name: expired
        in: query
        required: false
        schema:
          type: boolean
          example: false
        description: If set, returns only expired or non-expired certificates

      - name: expireInDays
        in: query
        required: false
        schema:
          type: integer
          example: 14
        description:
          If set, returns only certificates that have already expired or expire in the specified
          number of days, according to the effectiveNotAfter timestamp

      - name: host
        in: query
        required: false
        schema:
          type: string
          example: example.com
        description:
          If set, returns only certificates that are valid for the specified host, either
          because they contain the exact hostname or because they are wildcards and contain the
          parent hostname (e.g., a search for blog.example.com will match *.example.com wildcards)

      - name: spkiSha256
        in: query
        required: false
        schema:
          type: string
          example: 56c17eb4e3d510f7020e142cd36f617b38f93c26c72cc13dfebfbeed3e554382
          pattern: "^[a-fA-F0-9]{64}$"
        description: If set, returns only certificates whose public key (SPKI) matches the provided hash

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListCertsResponse"

    put:
      operationId: Create a certificate
      summary: Creates a new certificate
      description: |
        Use this API endpoint to upload a new certificate to your account. For
        example, if you've automated certificate generation, we suggest that you
        also automatically submit all new certificates to Hardenize. That way,
        when we observe the same certificate via Certificate Transparency, we
        will know for sure that it belongs to you. We may be able to determine
        that in any case if we see that the certificate has been installed, but
        uploading it to us makes this more reliable.
      tags:
      - Certificates

      requestBody:
        description: PEM-encoded certificate
        required: true
        content:
          application/x-pem-file:
            schema:
              type: string
              example:
                value: |
                  -----BEGIN CERTIFICATE-----
                  MIID/TCCA6OgAwIBAgIRANDmW2f+WPSl1knPqjuzwvswCgYIKoZIzj0EAwIwgZIx
                  CzAJBgNVBAYTAkdCMRswGQYDVQQIExJHcmVhdGVyIE1hbmNoZXN0ZXIxEDAOBgNV
                  BAcTB1NhbGZvcmQxGjAYBgNVBAoTEUNPTU9ETyBDQSBMaW1pdGVkMTgwNgYDVQQD
                  Ey9DT01PRE8gRUNDIERvbWFpbiBWYWxpZGF0aW9uIFNlY3VyZSBTZXJ2ZXIgQ0Eg
                  MjAeFw0xODAzMDEwMDAwMDBaFw0xODA5MDcyMzU5NTlaMGwxITAfBgNVBAsTGERv
                  bWFpbiBDb250cm9sIFZhbGlkYXRlZDEhMB8GA1UECxMYUG9zaXRpdmVTU0wgTXVs
                  dGktRG9tYWluMSQwIgYDVQQDExtzc2w3NjA2ODAuY2xvdWRmbGFyZXNzbC5jb20w
                  WTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASjQmXlPI8fSFxAgBabWaZ/llDVh0Qv
                  s6bEDqgu6Ny63HMiW6tXpBpnJs//B2Jysf4vFP2WaxHjD/CwhXyBiylso4IB/TCC
                  AfkwHwYDVR0jBBgwFoAUQAlhZ/C8g3FP3hIILG/U1Ct2PZYwHQYDVR0OBBYEFNsO
                  UClkQN7Qw/9QyXJMVcU+NVA1MA4GA1UdDwEB/wQEAwIHgDAMBgNVHRMBAf8EAjAA
                  MB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjBPBgNVHSAESDBGMDoGCysG
                  AQQBsjEBAgIHMCswKQYIKwYBBQUHAgEWHWh0dHBzOi8vc2VjdXJlLmNvbW9kby5j
                  b20vQ1BTMAgGBmeBDAECATBWBgNVHR8ETzBNMEugSaBHhkVodHRwOi8vY3JsLmNv
                  bW9kb2NhNC5jb20vQ09NT0RPRUNDRG9tYWluVmFsaWRhdGlvblNlY3VyZVNlcnZl
                  ckNBMi5jcmwwgYgGCCsGAQUFBwEBBHwwejBRBggrBgEFBQcwAoZFaHR0cDovL2Ny
                  dC5jb21vZG9jYTQuY29tL0NPTU9ET0VDQ0RvbWFpblZhbGlkYXRpb25TZWN1cmVT
                  ZXJ2ZXJDQTIuY3J0MCUGCCsGAQUFBzABhhlodHRwOi8vb2NzcC5jb21vZG9jYTQu
                  Y29tMEYGA1UdEQQ/MD2CG3NzbDc2MDY4MC5jbG91ZGZsYXJlc3NsLmNvbYIPKi5o
                  YXJkZW5pemUuY29tgg1oYXJkZW5pemUuY29tMAoGCCqGSM49BAMCA0gAMEUCIQDe
                  bJoLRDhbiDQSDWAb8+C2IkT3sXuL7nH0BYuxHiO32AIgf9YXFRRrzis/p7HVd9X2
                  pkP4CxvriyrLQwpB6s2RFQM=
                  -----END CERTIFICATE-----

      responses:
        '201':
          description: 'Certificate successfully created.'
        '204':
          description: 'Certificate existed prior to the call.'
        '400':
          description: 'Unable to parse input as certificate.'

  /certs/{sha256}:

    get:
      operationId: Retrieve a certificate
      summary:     Returns the certificate with the given SHA256 hash
      tags:
      - Certificates

      parameters:
      - name: sha256
        in:   path
        required: true
        schema:
          type:    string
          pattern: "^[a-fA-F0-9]{64}$"

      responses:
        '200':
          description: Successfully retrieved certificate
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCertResponse"
        '404':
          description: Certificate not found

components:

  responses:

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

  schemas:

    GetCertResponse:
      required:
      - cert
      properties:
        cert:
          $ref: '#/components/schemas/Cert'

    ListCertsResponse:
      required:
      - certs
      properties:
        certs:
          type: array
          items:
            $ref: '#/components/schemas/Cert'

    Cert:
      properties:

        sha256:
          type: string
          example: 56c17eb4e3d510f7020e142cd36f617b38f93c26c72cc13dfebfbeed3e554382
          description: Hex-encoded SHA256 hash of the certificate in DER format

        subject:
          type: string
          example: CN=ssl760680.cloudflaressl.com, OU=PositiveSSL Multi-Domain, OU=Domain Control Validated
          description: Subject distinguished name

        serial:
          type: string
          example: d0e65b67fe58f4a5d649cfaa3bb3c2fb
          description: Hex-encoded serial number

        issuer:
          type: string
          example: CN=COMODO ECC Domain Validation Secure Server CA 2, O=COMODO CA Limited, L=Salford, ST=Greater Manchester, C=GB
          description: Issuer distinguished name

        notBefore:
          type: date-time
          example: 2018-03-01T00:00:00.000Z
          description: ISO 8601 timestamp

        notAfter:
          type: date-time
          example: 2018-09-07T23:59:59.000Z
          description: ISO 8601 timestamp

        effectiveNotAfter:
          type: date-time
          example: 2018-09-07T23:59:59.000Z
          description: |
            ISO 8601 timestamp. This fields contains the time after which the certificate cannot be used
            in practice. For example, certificates issued from the old Symantec PKI infrastructure have
            been deprecated and can no longer be used for web sites, even though they are still technically valid.
            Depending on the deprecation phase, Symantec certificates will have the effective dates of
            March 1, 2018 (phase one) or September 1, 2018 (phase 2).

        revokedOn:
          type: date-time
          example: 2018-09-01T23:59:59.000Z
          description: Revocation timestamp, if available.

        keyAlg:
          type: string
          example: EC
          description: Private key algorithm, for example RSA or EC.

        keyLen:
          type: integer
          example: 256
          description: Private key length, for example 256 for an ECDSA key or 2048 for an RSA key.

        keyStrength:
          type: integer
          example: 128
          description: |
            Estimated private key strength in symmetric bits. For example, a 256-bit ECDSA key
            is thought to provide 128 bits of security, whereas a 2048-bit RSA key provides
            about 112.

        sigAlg:
          type: string
          example: ECDSAwithSHA256
          enum:
          - RSAwithMD2
          - RSAwithMD5
          - RSAwithSHA1
          - RSAwithSHA256
          - RSAwithSHA384
          - RSAwithSHA512
          - RSAPSS
          - DSAwithSHA1
          - DSAwithSHA256
          - ECDSAwithSHA1
          - ECDSAwithSHA256
          - ECDSAwithSHA384
          - ECDSAwithSHA512
          description: Certificate signature algorithm.

        spkiSha256:
          type: string
          example: 56c17eb4e3d510f7020e142cd36f617b38f93c26c72cc13dfebfbeed3e554382
          description: Hex-encoded SHA256 of the certificate's SPKI component

        hosts:
          type: array
          description: |
            All hosts specified in the certificate's SAN extension. This list includes both hosts
            and IP addresses. Wildcard hostnames are denoted with a leading dot, but no asterisk.
          items:
            type: string
            example: .hardenize.com

        caPathLen:
          type: integer
          example: -1
          description: |
            Indicates if this is a CA certificate. Leaf certificates will have -1 in this field,
            indicating that they cannot issue further certificates. CA certificates will have 0
            or a positive number. CA certificates without path length limit will have 2,147,483,647.

        wildcard:
          type: boolean
          description: Set to true if the hostname list contains at least one wildcard.

        selfSigned:
          type: boolean
          example: false
          description: Set to true if this is a self-signed certificate.

        firstSeen:
          type: date-time
          example: 2018-03-02T00:00:00.000Z
          description: |
            The first time this certificate was seen, which could be a variety of sources
            for example, CT, manual upload, or installed on a server.

        lastSeen:
          type: date-time
          example: 2018-05-01T00:00:00.000Z
          description: The last time this certificate was seen installed on a server

        seenInstalled:
          type: boolean
          description: Indicates if this certificate has been seen installed on a server

        active:
          type: boolean
          description: Indicates if this certificate has been seen installed recently

        precert:
          type: boolean
          example: false
          description: Indicates if the returned certificate is, in fact, a precertificate.

        managed:
          type: boolean
          description: |
            Indicates if this certificate is managed, i.e. provided by a third-party service that will
            also automatically renew the certificate when it becomes due.

        ownership:
          type: string
          example: own
          enum:
          - own
          - thirdParty
          description: |
            Indicates if this certificate belongs to the organisation, which means that it
            is served from one of the organization's properties. Do note that, in the case
            of certificate name mismatch, someone else's certificate may be considered as
            own. In that case, the **matchesOrgHost** field will be set to false.

        matchesOrgHost:
          type: boolean
          description: |
            Indicates if at least one of the host listed in the certificates matches
            a hosts that belongs to the organisation.

        symantecStatus:
          type: string
          example: notSymantec
          enum:
          - notSymantec
          - phaseOneAffected
          - phaseOneNotAffected
          - phaseTwoAffected
          - phaseTwoNotAffected
          - symantecExcluded
          description: |
            Indicates if this certificate was issued from Symantec's PKI infrastructure.

        ctRequired:
          type: boolean
          description: |
            Indicates whether certificate is required to be logged to CT for use on public
            sites. This is a requirement for all certificates issued from May 2018 onwards,
            as well for some earlier Symantec certificates.

        ctCompliant:
          type: boolean
          description: Indicates whether certificate embeds sufficient SCTs to satisfy CT compliance.

        ctLogs:
          type: array
          items:
            $ref: '#/components/schemas/CertCtLog'

        pem:
          type: string
          example: MIID/TCCA6OgAwIBAgIRANDmW2f+WPSl1knPqjuzwvswCgYIKoZIzj0EAwIwgZIxCzAJBgNVBAYTAkdCMRswGQYDVQQIExJHcmVhdGVyIE1hbmNoZXN0ZXIxEDAOBgNVBAcTB1NhbGZvcmQxGjAYBgNVBAoTEUNPTU9ETyBDQSBMaW1pdGVkMTgwNgYDVQQDEy9DT01PRE8gRUNDIERvbWFpbiBWYWxpZGF0aW9uIFNlY3VyZSBTZXJ2ZXIgQ0EgMjAeFw0xODAzMDEwMDAwMDBaFw0xODA5MDcyMzU5NTlaMGwxITAfBgNVBAsTGERvbWFpbiBDb250cm9sIFZhbGlkYXRlZDEhMB8GA1UECxMYUG9zaXRpdmVTU0wgTXVsdGktRG9tYWluMSQwIgYDVQQDExtzc2w3NjA2ODAuY2xvdWRmbGFyZXNzbC5jb20wWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASjQmXlPI8fSFxAgBabWaZ/llDVh0Qvs6bEDqgu6Ny63HMiW6tXpBpnJs//B2Jysf4vFP2WaxHjD/CwhXyBiylso4IB/TCCAfkwHwYDVR0jBBgwFoAUQAlhZ/C8g3FP3hIILG/U1Ct2PZYwHQYDVR0OBBYEFNsOUClkQN7Qw/9QyXJMVcU+NVA1MA4GA1UdDwEB/wQEAwIHgDAMBgNVHRMBAf8EAjAAMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjBPBgNVHSAESDBGMDoGCysGAQQBsjEBAgIHMCswKQYIKwYBBQUHAgEWHWh0dHBzOi8vc2VjdXJlLmNvbW9kby5jb20vQ1BTMAgGBmeBDAECATBWBgNVHR8ETzBNMEugSaBHhkVodHRwOi8vY3JsLmNvbW9kb2NhNC5jb20vQ09NT0RPRUNDRG9tYWluVmFsaWRhdGlvblNlY3VyZVNlcnZlckNBMi5jcmwwgYgGCCsGAQUFBwEBBHwwejBRBggrBgEFBQcwAoZFaHR0cDovL2NydC5jb21vZG9jYTQuY29tL0NPTU9ET0VDQ0RvbWFpblZhbGlkYXRpb25TZWN1cmVTZXJ2ZXJDQTIuY3J0MCUGCCsGAQUFBzABhhlodHRwOi8vb2NzcC5jb21vZG9jYTQuY29tMEYGA1UdEQQ/MD2CG3NzbDc2MDY4MC5jbG91ZGZsYXJlc3NsLmNvbYIPKi5oYXJkZW5pemUuY29tgg1oYXJkZW5pemUuY29tMAoGCCqGSM49BAMCA0gAMEUCIQDebJoLRDhbiDQSDWAb8+C2IkT3sXuL7nH0BYuxHiO32AIgf9YXFRRrzis/p7HVd9X2pkP4CxvriyrLQwpB6s2RFQM=
          description: Base64-encoded certificate in DER format

      required:
      - sha256
      - spkiSha256
      - hosts
      - notBefore
      - notAfter
      - effectiveNotAfter
      - revokedOn
      - subject
      - serial
      - issuer
      - hosts
      - firstSeen
      - lastSeen
      - caPathLen
      - wildcard
      - selfSigned
      - managed
      - ownership
      - seenInstalled
      - active
      - precert
      - pem
      - keyAlg
      - sigAlg
      - keyLen
      - keyStrength
      - ctLogs
      - symantecStatus
      - matchesOrgHost

    CertCtLog:
      properties:

        log:
          type: string
          example: ct.googleapis.com/rocketeer
          description: CT log URL

        timestamp:
          type: integer
          format: int64
          example: 1533791245857
          description: Milliseconds since January 1, 1970, excluding leap seconds, per CT RFC.

        index:
          type: integer
          format: int64
          example: 232455
          description: This certificate's index in the referenced CT log.

        sources:
          type: array
          example: cert
          description: |
            Hardenize collects CT information from multiple sources. This set indicates
            all the places where we've collected the information we have on a certificate.
          enum:
          - cert
          - log
          - ocsp
          - tls

      required:
      - log
      - timestamp
      - sources

    ErrorResponse:
      description: |
        This object is returned whenever a processing error occurs. It contains
        a list of error messages, some of which may be attributed to specific
        request parameters.
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorMessage'
      required:
      - errors

    ErrorMessage:
      description: |
        One instance of this object is returned for every problem encountered
        during request processing. If the object includes parameter name, the
        problem is related to that parameter, otherwise the problem applies to the
        request as a whole.
      properties:
        param:
          type: string
        message:
          type: string
      required:
      - message

  securitySchemes:
    Basic HTTP Authentication:
      type: http
      scheme: Basic